{
  "uid" : "63a296601e317cdd",
  "name" : "Запрос списка идентификаторов пользователей по критерию: female ",
  "fullName" : "test.test_coolrocket#test_get_list_of_user_id_by_gender",
  "historyId" : "d0e900c7a9fdf216bdda1754b0dd80fd",
  "time" : {
    "start" : 1592168108312,
    "stop" : 1592168108404,
    "duration" : 92
  },
  "status" : "broken",
  "statusMessage" : "Exception: 'success' is a required property",
  "statusTrace" : "gender = 'female'\n\n    @allure.title(\"Запрос списка идентификаторов пользователей по критерию: {gender} \")\n    @pytest.mark.parametrize(\"gender\", test_data_gender)\n    def test_get_list_of_user_id_by_gender(gender):\n        with allure.step(f'Выполняется запрос GET https://dev.coolrocket.com/api/test/users?gender={gender}'):\n            response = requests.get(f\"https://dev.coolrocket.com/api/test/users\", params={'gender': gender})\n            #response = session.get(f'mock://dev.coolrocket.com/api/test/users?gender={gender}')\n    \n        with open(f'json/gender_{gender}.json', 'w') as f:\n            f.write(json.dumps(response.json()))\n    \n        basic_checks(response)\n    \n        try:\n            with allure.step('Получение json'):\n                document = response.json()\n            with allure.step('Проверка, что массив с идентификаторами пользователей не пуст '):\n                assert len(document[\"result\"]) > 0\n            with allure.step('Валидация по Схеме TestResponseOfListOfint'):\n>               validate(document, schema[\"definitions\"][\"TestResponseOfListOfint\"])\n\ntest/test_coolrocket.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'errorCode': 0, 'errorMessage': None, 'isSuccess': True, 'result': [5, 15, 16, 300]}\nschema = {'properties': {'errorCode': {'format': 'int32', 'type': 'integer'}, 'errorMessage': {'type': 'string'}, 'result': {'i...ess': {'type': 'boolean'}}, 'required': ['errorCode', 'success'], 'title': 'TestResponseOfListOfint', 'type': 'object'}\ncls = <class 'jsonschema.validators.create.<locals>.Validator'>, args = (), kwargs = {}\nvalidator = <jsonschema.validators.create.<locals>.Validator object at 0x7fdc1a5f9160>\nerror = <ValidationError: \"'success' is a required property\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`validate` will first verify that the provided schema is\n        itself valid, since not doing so can lead to less obvious error\n        messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially if you\n        intend to validate multiple instances with the same schema, you\n        likely would prefer using the `IValidator.validate` method directly\n        on a specific validator (e.g. ``Draft7Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (IValidator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :validator:`$schema` property containing a known meta-schema [#]_\n        then the proper validator will be used. The specification recommends\n        that all schemas contain :validator:`$schema` properties for this\n        reason. If no :validator:`$schema` property is found, the default\n        validator class is the latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError` if the instance\n                is invalid\n    \n            `jsonschema.exceptions.SchemaError` if the schema itself\n                is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 'success' is a required property\nE           \nE           Failed validating 'required' in schema:\nE               {'properties': {'errorCode': {'format': 'int32', 'type': 'integer'},\nE                               'errorMessage': {'type': 'string'},\nE                               'result': {'items': {'format': 'int32',\nE                                                    'type': 'integer'},\nE                                          'type': 'array'},\nE                               'success': {'type': 'boolean'}},\nE                'required': ['errorCode', 'success'],\nE                'title': 'TestResponseOfListOfint',\nE                'type': 'object'}\nE           \nE           On instance:\nE               {'errorCode': 0,\nE                'errorMessage': None,\nE                'isSuccess': True,\nE                'result': [5, 15, 16, 300]}\n\nvenv/lib/python3.8/site-packages/jsonschema/validators.py:934: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\ngender = 'female'\n\n    @allure.title(\"Запрос списка идентификаторов пользователей по критерию: {gender} \")\n    @pytest.mark.parametrize(\"gender\", test_data_gender)\n    def test_get_list_of_user_id_by_gender(gender):\n        with allure.step(f'Выполняется запрос GET https://dev.coolrocket.com/api/test/users?gender={gender}'):\n            response = requests.get(f\"https://dev.coolrocket.com/api/test/users\", params={'gender': gender})\n            #response = session.get(f'mock://dev.coolrocket.com/api/test/users?gender={gender}')\n    \n        with open(f'json/gender_{gender}.json', 'w') as f:\n            f.write(json.dumps(response.json()))\n    \n        basic_checks(response)\n    \n        try:\n            with allure.step('Получение json'):\n                document = response.json()\n            with allure.step('Проверка, что массив с идентификаторами пользователей не пуст '):\n                assert len(document[\"result\"]) > 0\n            with allure.step('Валидация по Схеме TestResponseOfListOfint'):\n                validate(document, schema[\"definitions\"][\"TestResponseOfListOfint\"])\n        except json.JSONDecodeError:\n            allure.attach(json.dumps(response.json()), \"Invalid JSON\");\n            raise Exception('Invalid JSON')\n        except ValidationError as exc:\n            allure.attach(json.dumps(response.json()), \"Invalid document\");\n            allure.attach(json.dumps(schema[\"definitions\"][\"TestResponseOfListOfint\"], indent=4), \"schema\");\n>           raise Exception(exc.message)\nE           Exception: 'success' is a required property\n\ntest/test_coolrocket.py:143: Exception",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "Exception: 'success' is a required property",
    "statusTrace" : "gender = 'female'\n\n    @allure.title(\"Запрос списка идентификаторов пользователей по критерию: {gender} \")\n    @pytest.mark.parametrize(\"gender\", test_data_gender)\n    def test_get_list_of_user_id_by_gender(gender):\n        with allure.step(f'Выполняется запрос GET https://dev.coolrocket.com/api/test/users?gender={gender}'):\n            response = requests.get(f\"https://dev.coolrocket.com/api/test/users\", params={'gender': gender})\n            #response = session.get(f'mock://dev.coolrocket.com/api/test/users?gender={gender}')\n    \n        with open(f'json/gender_{gender}.json', 'w') as f:\n            f.write(json.dumps(response.json()))\n    \n        basic_checks(response)\n    \n        try:\n            with allure.step('Получение json'):\n                document = response.json()\n            with allure.step('Проверка, что массив с идентификаторами пользователей не пуст '):\n                assert len(document[\"result\"]) > 0\n            with allure.step('Валидация по Схеме TestResponseOfListOfint'):\n>               validate(document, schema[\"definitions\"][\"TestResponseOfListOfint\"])\n\ntest/test_coolrocket.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'errorCode': 0, 'errorMessage': None, 'isSuccess': True, 'result': [5, 15, 16, 300]}\nschema = {'properties': {'errorCode': {'format': 'int32', 'type': 'integer'}, 'errorMessage': {'type': 'string'}, 'result': {'i...ess': {'type': 'boolean'}}, 'required': ['errorCode', 'success'], 'title': 'TestResponseOfListOfint', 'type': 'object'}\ncls = <class 'jsonschema.validators.create.<locals>.Validator'>, args = (), kwargs = {}\nvalidator = <jsonschema.validators.create.<locals>.Validator object at 0x7fdc1a5f9160>\nerror = <ValidationError: \"'success' is a required property\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`validate` will first verify that the provided schema is\n        itself valid, since not doing so can lead to less obvious error\n        messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially if you\n        intend to validate multiple instances with the same schema, you\n        likely would prefer using the `IValidator.validate` method directly\n        on a specific validator (e.g. ``Draft7Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (IValidator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :validator:`$schema` property containing a known meta-schema [#]_\n        then the proper validator will be used. The specification recommends\n        that all schemas contain :validator:`$schema` properties for this\n        reason. If no :validator:`$schema` property is found, the default\n        validator class is the latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError` if the instance\n                is invalid\n    \n            `jsonschema.exceptions.SchemaError` if the schema itself\n                is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 'success' is a required property\nE           \nE           Failed validating 'required' in schema:\nE               {'properties': {'errorCode': {'format': 'int32', 'type': 'integer'},\nE                               'errorMessage': {'type': 'string'},\nE                               'result': {'items': {'format': 'int32',\nE                                                    'type': 'integer'},\nE                                          'type': 'array'},\nE                               'success': {'type': 'boolean'}},\nE                'required': ['errorCode', 'success'],\nE                'title': 'TestResponseOfListOfint',\nE                'type': 'object'}\nE           \nE           On instance:\nE               {'errorCode': 0,\nE                'errorMessage': None,\nE                'isSuccess': True,\nE                'result': [5, 15, 16, 300]}\n\nvenv/lib/python3.8/site-packages/jsonschema/validators.py:934: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\ngender = 'female'\n\n    @allure.title(\"Запрос списка идентификаторов пользователей по критерию: {gender} \")\n    @pytest.mark.parametrize(\"gender\", test_data_gender)\n    def test_get_list_of_user_id_by_gender(gender):\n        with allure.step(f'Выполняется запрос GET https://dev.coolrocket.com/api/test/users?gender={gender}'):\n            response = requests.get(f\"https://dev.coolrocket.com/api/test/users\", params={'gender': gender})\n            #response = session.get(f'mock://dev.coolrocket.com/api/test/users?gender={gender}')\n    \n        with open(f'json/gender_{gender}.json', 'w') as f:\n            f.write(json.dumps(response.json()))\n    \n        basic_checks(response)\n    \n        try:\n            with allure.step('Получение json'):\n                document = response.json()\n            with allure.step('Проверка, что массив с идентификаторами пользователей не пуст '):\n                assert len(document[\"result\"]) > 0\n            with allure.step('Валидация по Схеме TestResponseOfListOfint'):\n                validate(document, schema[\"definitions\"][\"TestResponseOfListOfint\"])\n        except json.JSONDecodeError:\n            allure.attach(json.dumps(response.json()), \"Invalid JSON\");\n            raise Exception('Invalid JSON')\n        except ValidationError as exc:\n            allure.attach(json.dumps(response.json()), \"Invalid document\");\n            allure.attach(json.dumps(schema[\"definitions\"][\"TestResponseOfListOfint\"], indent=4), \"schema\");\n>           raise Exception(exc.message)\nE           Exception: 'success' is a required property\n\ntest/test_coolrocket.py:143: Exception",
    "steps" : [ {
      "name" : "Выполняется запрос GET https://dev.coolrocket.com/api/test/users?gender=female",
      "time" : {
        "start" : 1592168108312,
        "stop" : 1592168108402,
        "duration" : 90
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Проверка статус кода, ожидается 200",
      "time" : {
        "start" : 1592168108402,
        "stop" : 1592168108402,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Проверка кодировки, ожидается utf-8",
      "time" : {
        "start" : 1592168108402,
        "stop" : 1592168108402,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Проверка \"Content-Type\", ожидается \"application/json\"",
      "time" : {
        "start" : 1592168108402,
        "stop" : 1592168108402,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получение json",
      "time" : {
        "start" : 1592168108402,
        "stop" : 1592168108402,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Проверка, что массив с идентификаторами пользователей не пуст ",
      "time" : {
        "start" : 1592168108402,
        "stop" : 1592168108402,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Валидация по Схеме TestResponseOfListOfint",
      "time" : {
        "start" : 1592168108402,
        "stop" : 1592168108403,
        "duration" : 1
      },
      "status" : "broken",
      "statusMessage" : "jsonschema.exceptions.ValidationError: 'success' is a required property\n\nFailed validating 'required' in schema:\n    {'properties': {'errorCode': {'format': 'int32', 'type': 'integer'},\n                    'errorMessage': {'type': 'string'},\n                    'result': {'items': {'format': 'int32',\n                                         'type': 'integer'},\n                               'type': 'array'},\n                    'success': {'type': 'boolean'}},\n     'required': ['errorCode', 'success'],\n     'title': 'TestResponseOfListOfint',\n     'type': 'object'}\n\nOn instance:\n    {'errorCode': 0,\n     'errorMessage': None,\n     'isSuccess': True,\n     'result': [5, 15, 16, 300]}\n",
      "statusTrace" : "  File \"/media/user/fa19b2b3-4618-4892-ab66-bb7c31622e52/Test_task/test-py/test/test_coolrocket.py\", line 136, in test_get_list_of_user_id_by_gender\n    validate(document, schema[\"definitions\"][\"TestResponseOfListOfint\"])\n  File \"/media/user/fa19b2b3-4618-4892-ab66-bb7c31622e52/Test_task/test-py/venv/lib/python3.8/site-packages/jsonschema/validators.py\", line 934, in validate\n    raise error\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "2be908d26deb04fc",
      "name" : "Invalid document",
      "source" : "2be908d26deb04fc.attach",
      "type" : "text/plain",
      "size" : 85
    }, {
      "uid" : "cd4b5f1d4aabd763",
      "name" : "schema",
      "source" : "cd4b5f1d4aabd763.attach",
      "type" : "text/plain",
      "size" : 543
    } ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_coolrocket"
  }, {
    "name" : "host",
    "value" : "user-p"
  }, {
    "name" : "thread",
    "value" : "51756-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_coolrocket"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "gender",
    "value" : "'female'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "63a296601e317cdd.json",
  "parameterValues" : [ "'female'" ]
}